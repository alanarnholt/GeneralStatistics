---
title: "Introduction To R"
author: "Alan T. Arnholt"
date: last-modified
date-format: "[Last modified on] MMMM DD, YYYY HH:mm:ss zzz"
format: revealjs
editor: visual
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, comment = NA, prompt = TRUE)
```

## R as a calculator

```{r}
3 + 3      # addition
10 - 4     # subtraction
6 * 7      # multiplication
120 / 10   # division
```

## Comments and variable assignment

* R uses `#` for comments
```{r}
# This is a comment
```
* To assign a value to a variable use `<-`
* The expression `my_stuff <- 123` assigns the number 123 to the variable `my_stuff`
```{r}
my_stuff <- 123
my_stuff
```

## More complex expressions

Find the volume of a cylinder with a radius of 1 foot and a height of 10 feet.

Recall that $\text{Volume} = \pi \times r^2 \times h$

```{r}
r <- 1
h <- 10
(volume <- pi*r^2*h)
# or
pi*1^2*10
```


## Basic data types

* Numeric
* Logical
* Character
* Complex
* Raw

## What is the data type?

```{r}
my_numeric <- 13
my_logical <- TRUE
my_character <- "some text"
class(my_numeric)
class(my_logical)
class(my_character)
```


## Creating vectors

To create a vector use the `c()` function

```{r}
numeric_vector <- c(3, 5, 7, 11)
numeric_vector
logical_vector <- c(TRUE, FALSE, TRUE, TRUE)
logical_vector
character_vector <- c("Alan", "Bob", "Charlie")
character_vector
```

## Naming a vector

```{r}
# Predicted temperature in Boone 8/21/17 - 8/25/17
predicted <- c(65, 75, 74, 71, 70)
predicted
days <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
days
names(predicted) <- days
predicted
```

## Vector selection

Find the days it is predicted to be above 72.

```{r}
predicted > 72
predicted[predicted > 72]
```

## Matrices

* A matrix is a collection of the same data type (numeric, character, logical, or complex) arranged into a fixed number of rows and columns.  
* Matrices in R are column major.
* Use the `matrix()` function to construct a matrix.

```{r}
a_vector <- 1:9
a_matrix <- matrix(a_vector, nrow = 3)
a_matrix
```

## Naming a matrix

```{r}
row_names <- c("A", "B", "C")
col_names <- c("X", "Y", "Z")
dimnames(a_matrix) <- list(row_names, col_names)
a_matrix
a_matrix[2, 2] # or a_matrix["B", "Y"]
```

## Factors

* A factor is a statistical data type used to store categorical variables.

```{r}
year_group <- c("Freshmen", "Junior", "Junior", "Senior", 
                "Sophmore")
class(year_group)
factor_year_group <- factor(year_group)
factor_year_group
```

## Factors (continued)

```{r}
# Problem with the levels
factor_year_group <- factor(year_group, ordered = TRUE, 
                            levels = c("Freshmen", "Sophmore", 
                                       "Junior", "Senior"))
factor_year_group
SE <- factor_year_group[4]
SO <- factor_year_group[5]
SE > SO
```

## Data frame

A data frame is similar to a matrix in the sense that it is a rectangular structure used to store information.  It is different in that all elements of a matrix must be of the same mode (numeric, character, etc.), but this restriction does not apply to data frames.  That is, data frames have a two-dimensional structure with rows (experimental units) and columns (variables) where all columns have the same number of rows, which have unique names; yet the column (variables) in a data frame are not required to be of the same mode.

## Data frame (2)

Another way to think of a data frame is as a list with the restriction that all its components are equal length vectors.  

* To create a data frame use the `data.frame()` function.

```{r}
nv <- c(1, 3, 6, 8)
cv <- c("a", "v", "f", "p")
lv <- c(TRUE, FALSE, FALSE, TRUE)
DF1 <- data.frame(nv, cv, lv)
DF1
```

## Selecting data frame elements

```{r}
DF1$nv
DF1$cv
DF1$lv[3]
```

## Selecting data frame elements (2)

```{r}
DF1[1:2, "nv"]     # rows 1 and 2 of column "nv"
# or
DF1[1:2, 1]
DF1[ , "cv"]       # all rows of "cv"
```

## Using `subset()`

```{r}
subset(DF1, subset = lv == TRUE)
# Or
DF1[lv == TRUE, ]
```

## Using `subset()` (2)

```{r}
subset(DF1, subset = nv < 5)
# Or
DF1[nv < 5, ]
```

## Using `order()`

`order()` is a function that gives you the ranked position of each element when it is applied on a variable.

```{r}
num_vec <- c(13, 17, 1, 31, 45)
order(num_vec)
num_vec[order(num_vec)]
```

## Using `order()` to sort a data frame

```{r}
head(ChickWeight, n = 3)
head(ChickWeight[order(ChickWeight$Time, ChickWeight$weight), ], 
     n = 5)
```

## Lists

A list is an object whose elements can be of different modes (character, numeric, logical, etc.).  Lists are used to unite related data that have different modes.  The objects in a list can be matrices, vectors, data frames, and even other lists.

* To create a list use the `list()` function.

```{r}
my_vector <- 1:5
my_matrix <- matrix(1:9, byrow = TRUE, nrow = 3)
my_df <- DF1
my_list <- list(my_vector, my_matrix, my_df)
```

## Lists (2)

```{r}
my_list
```

## Creating a named list

```{r}
my_list2 <- list(Vector = my_vector, Matrix = my_matrix)
my_list2
```

## Selecting elements from a list

One way to select a component is using a numbered position of that component. For example, to "extract" the second component of `my_list2`, enter `my_list2[[2]]`.

```{r}
my_list2[[2]]
```

## Selecting elements from a list (2)

```{r}
my_list2[["Matrix"]]
# or
my_list2$Matrix
```